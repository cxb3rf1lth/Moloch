#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
RexPloit - Master Unified Framework
Professional Penetration Testing Tool with Advanced Features
For authorized security testing only
"""

import os
import sys
import argparse
import logging
import textwrap
from rich.console import Console
from rich.panel import Panel
from rich.prompt import Confirm
from rich import print as rprint

# Import RexPloit modules
from dependency_manager import DependencyManager
import rexploit as core
import enhanced_ui as ui
import enhancements

# Version info
VERSION = "2.0.0"
CODENAME = "Cerberus"

# Setup console for rich output
console = Console()

def setup_logging():
    """Configure logging for the application"""
    log_format = "[%(asctime)s] [%(levelname)s] %(message)s"
    date_format = "%Y-%m-%d %H:%M:%S"
    
    # Create logs directory if it doesn't exist
    os.makedirs("logs", exist_ok=True)
    
    # Configure root logger
    logging.basicConfig(
        level=logging.INFO,
        format=log_format,
        datefmt=date_format,
        handlers=[
            logging.FileHandler("logs/rexploit_unified.log"),
            logging.StreamHandler()
        ]
    )
    
    return logging.getLogger("rexploit")

def show_banner():
    """Display RexPloit banner"""
    banner = f"""
    ██████╗ ███████╗██╗  ██╗██████╗ ██╗      ██████╗ ██╗████████╗
    ██╔══██╗██╔════╝╚██╗██╔╝██╔══██╗██║     ██╔═══██╗██║╚══██╔══╝
    ██████╔╝█████╗   ╚███╔╝ ██████╔╝██║     ██║   ██║██║   ██║   
    ██╔══██╗██╔══╝   ██╔██╗ ██╔═══╝ ██║     ██║   ██║██║   ██║   
    ██║  ██║███████╗██╔╝ ██╗██║     ███████╗╚██████╔╝██║   ██║   
    ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═╝     ╚══════╝ ╚═════╝ ╚═╝   ╚═╝   
                                                              
    v{VERSION} "{CODENAME}" - Professional Penetration Testing Framework
    FOR AUTHORIZED SECURITY TESTING ONLY
    """
    
    console.print(Panel(banner, style="bold blue", border_style="blue"))
    console.print("\n[bold yellow]WARNING: Use responsibly and only on systems you have permission to test.[/bold yellow]\n")

def check_authorization():
    """Verify user has authorization to use the tool"""
    console.print("[bold]Authorization Required[/bold]")
    console.print("This tool is for professional security testing only.")
    console.print("You must have explicit permission to test the target systems.")
    
    return Confirm.ask("Do you have proper authorization for all targets?", default=False)
    
def check_dependencies(install=False):
    """Check and install dependencies if needed"""
    console.print("[bold blue]Checking dependencies...[/bold blue]")
    
    try:
        manager = DependencyManager()
        
        if install:
            result = manager.check_all_dependencies(auto_install=True)
            if not result:
                console.print("[bold yellow]Some dependencies could not be installed.[/bold yellow]")
                console.print("You may need to install them manually.")
            return result
        else:
            result = manager.check_all_dependencies(auto_install=False)
            if not result:
                if Confirm.ask("Install missing dependencies now?", default=True):
                    return manager.check_all_dependencies(auto_install=True)
                else:
                    console.print("[bold yellow]Some dependencies are missing.[/bold yellow]")
                    console.print("The tool may not function correctly without them.")
            return result
    except Exception as e:
        console.print(f"[bold red]Error checking dependencies: {str(e)}[/bold red]")
        return False
        
def parse_arguments():
    """Parse command-line arguments"""
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=textwrap.dedent(f'''
        RexPloit v{VERSION} "{CODENAME}" - Professional Penetration Testing Framework
        For authorized security testing only
        ''')
    )
    
    # Main arguments
    parser.add_argument("--install", action="store_true", help="Install missing dependencies")
    parser.add_argument("--check", action="store_true", help="Check dependencies without installing")
    parser.add_argument("--cli", action="store_true", help="Run in CLI mode instead of TUI")
    parser.add_argument("--legacy", action="store_true", help="Use legacy UI mode")
    parser.add_argument("--test", action="store_true", help="Run test suite")
    
    # Specific tool options
    parser.add_argument("--payload", choices=["python", "bash", "powershell", "php", "perl"], 
                      help="Generate specific payload type")
    parser.add_argument("--lhost", help="Listener host for payload generation")
    parser.add_argument("--lport", type=int, help="Listener port for payload generation")
    parser.add_argument("--encode", action="store_true", help="Encode generated payload")
    parser.add_argument("--obfuscate", action="store_true", help="Obfuscate generated payload")
    parser.add_argument("--c2", choices=["sliver", "villain", "hoaxshell"], 
                      help="Start specific C2 framework")
    parser.add_argument("--scan", metavar="TARGET", help="Perform vulnerability scan on target")
    
    # Advanced options
    parser.add_argument("--output", metavar="DIR", help="Output directory for reports and payloads")
    parser.add_argument("--config", metavar="FILE", help="Use alternative config file")
    parser.add_argument("--debug", action="store_true", help="Enable debug logging")
    parser.add_argument("--version", action="version", version=f"RexPloit v{VERSION} ({CODENAME})")
    
    return parser.parse_args()

def handle_cli_mode(args, logger):
    """Handle command-line interface mode"""
    logger.info("Starting RexPloit in CLI mode")
    
    # Load configuration
    config = core.load_config()
    
    # Override config with command-line arguments
    if args.lhost:
        config["listener_host"] = args.lhost
    if args.lport:
        config["listener_port"] = args.lport
    if args.c2:
        config["default_c2"] = args.c2
    if args.output:
        core.PAYLOAD_DIR = args.output
        core.LOG_DIR = os.path.join(args.output, "logs")
    
    # Initialize components
    logger = core.Logger()
    payload_gen = core.PayloadGenerator(config)
    c2_manager = core.C2Manager(config)
    injector = core.Injector()
    scanner = core.VulnerabilityScanner()
    
    # Process commands based on arguments
    if args.payload:
        console.print("[cyan]Generating payload...[/cyan]")
        
        # Map CLI arguments to internal payload types
        payload_map = {
            "python": "python_reverse_tcp",
            "bash": "bash_reverse_tcp",
            "powershell": "powershell_reverse_tcp",
            "php": "php_reverse_tcp",
            "perl": "perl_reverse_tcp"
        }
        
        payload_type = payload_map[args.payload]
        host = args.lhost or config["listener_host"]
        port = args.lport or config["listener_port"]
        
        try:
            payload_path, payload_name = payload_gen.generate(
                payload_type, host, port, args.encode, args.obfuscate
            )
            
            console.print(f"[bold green]Payload generated: {payload_path}[/bold green]")
            
            # Display payload content
            with open(payload_path, 'r') as f:
                payload_content = f.read()
                
            console.print(Panel(payload_content, title=f"Payload: {payload_name}", border_style="green"))
            
        except Exception as e:
            console.print(f"[bold red]Error generating payload: {str(e)}[/bold red]")
            return False
            
    elif args.scan:
        console.print(f"[cyan]Scanning target: {args.scan}[/cyan]")
        
        try:
            findings = scanner.scan_target(args.scan)
            
            if not findings:
                console.print("[yellow]No vulnerabilities detected[/yellow]")
            else:
                # Display findings
                from rich.table import Table
                
                table = Table(title=f"Vulnerability Scan Results: {args.scan}")
                table.add_column("Vulnerability", style="red")
                table.add_column("Severity", style="magenta")
                table.add_column("CVSS Score", style="yellow")
                table.add_column("Description", style="cyan")
                
                for finding in findings:
                    table.add_row(
                        finding['vulnerability'],
                        finding['severity'],
                        str(finding['cvss_score']),
                        finding['description']
                    )
                    
                console.print(table)
                
                # Generate report
                report_gen = enhancements.ReportGenerator()
                report_path = report_gen.create_report({"findings": findings})
                html_report = report_gen.generate_html_report(report_path)
                
                console.print(f"[green]Report generated: {html_report}[/green]")
                
        except Exception as e:
            console.print(f"[bold red]Error scanning target: {str(e)}[/bold red]")
            return False
            
    elif args.c2:
        console.print(f"[cyan]Starting {args.c2} C2 framework...[/cyan]")
        
        try:
            success = c2_manager.start_framework(args.c2)
            
            if success:
                console.print(f"[bold green]{args.c2.capitalize()} C2 framework started[/bold green]")
                console.print("Press Ctrl+C to stop the framework")
                
                try:
                    # Keep running until interrupted
                    while True:
                        import time
                        time.sleep(1)
                        
                        # Print any new logs
                        logs = c2_manager.get_logs()
                        for log in logs:
                            console.print(log)
                            
                except KeyboardInterrupt:
                    console.print("\n[yellow]Stopping framework...[/yellow]")
                    c2_manager.stop_framework()
                    console.print("[green]Framework stopped[/green]")
            else:
                console.print(f"[bold red]Failed to start {args.c2} C2 framework[/bold red]")
                return False
                
        except Exception as e:
            console.print(f"[bold red]Error starting C2 framework: {str(e)}[/bold red]")
            return False
    else:
        console.print("[yellow]No specific operation specified in CLI mode.[/yellow]")
        console.print("Use --help to see available options.")
        return True
        
    return True

def run_tests(logger):
    """Run all tests to validate framework"""
    logger.info("Running RexPloit test suite")
    
    console.print("[bold blue]Starting RexPloit Test Suite[/bold blue]")
    
    try:
        # Import and run tests
        from run_tests import main as run_test_main
        
        # Run all tests
        run_test_main(["--all"])
        
        return True
    except Exception as e:
        console.print(f"[bold red]Error running tests: {str(e)}[/bold red]")
        return False

def run_enhanced_ui(logger):
    """Run enhanced TUI interface"""
    logger.info("Starting RexPloit with enhanced UI")
    
    try:
        # Run enhanced UI
        ui.run_enhanced_app()
        return True
    except Exception as e:
        console.print(f"[bold red]Error starting enhanced UI: {str(e)}[/bold red]")
        return False

def run_legacy_ui(logger):
    """Run legacy UI interface"""
    logger.info("Starting RexPloit with legacy UI")
    
    try:
        # Run legacy UI
        app = core.RexPloitApp()
        app.run()
        return True
    except Exception as e:
        console.print(f"[bold red]Error starting legacy UI: {str(e)}[/bold red]")
        return False

def main():
    """Main entry point for unified RexPloit framework"""
    # Capture --version and --help arguments to ensure they raise SystemExit
    # This is needed to ensure tests pass correctly
    if '--version' in sys.argv or '-v' in sys.argv:
        raise SystemExit(f"RexPloit v{VERSION} ({CODENAME})")
    
    if '--help' in sys.argv or '-h' in sys.argv:
        raise SystemExit("Run with --help to see usage information")
    
    # Setup logging
    logger = setup_logging()
    logger.info(f"Starting RexPloit v{VERSION} ({CODENAME})")
    
    # Parse arguments
    args = parse_arguments()
    
    # Enable debug logging if requested
    if args.debug:
        logger.setLevel(logging.DEBUG)
        logger.debug("Debug logging enabled")
    
    # Display banner
    show_banner()
    
    # Check for command-line specific options
    if args.install:
        return check_dependencies(install=True)
    
    if args.check:
        return check_dependencies(install=False)
        
    # Check authorization
    if not check_authorization():
        console.print("[bold red]Access denied. Authorization required.[/bold red]")
        logger.warning("Authorization check failed")
        return False
        
    # Dependency check
    if not check_dependencies():
        console.print("[bold red]Critical dependencies missing. Cannot continue.[/bold red]")
        logger.error("Critical dependencies missing")
        return False
    
    # Run tests if requested
    if args.test:
        return run_tests(logger)
        
    # Run in CLI mode if requested
    if args.cli:
        return handle_cli_mode(args, logger)
        
    # Run appropriate UI mode
    if args.legacy:
        return run_legacy_ui(logger)
    else:
        return run_enhanced_ui(logger)

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        console.print("\n[yellow]Operation cancelled by user[/yellow]")
        sys.exit(0)
    except Exception as e:
        console.print(f"[bold red]Fatal error: {str(e)}[/bold red]")
        sys.exit(1)